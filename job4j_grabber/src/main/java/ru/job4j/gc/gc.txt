Из чего же состоит объект?
Прежде чем определять объем потребляемой памяти, следует разобраться, что же JVM хранит для каждого объекта:
Заголовок объекта;
Память для примитивных типов;
Память для ссылочных типов;
Смещение/выравнивание — по сути, это несколько неиспользуемых байт, что размещаются после данных самого объекта.
Это сделано для того, чтобы адрес в памяти всегда был кратным машинному слову,
для ускорения чтения из памяти + уменьшения количества бит для указателя на объект + предположительно для уменьшения фрагментации памяти.
Стоит также отметить, что в java размер любого объекта кратен 8 байтам!

Нюансы для 32 и 64 битной платформы?
Минимальный размер объекта для современного 64-битного JDK составляет 16 байт, так как объект имеет 12-байтовый заголовок,
дополненный до размера, кратного 8-ми байтам.
В 32-битной JDK, накладные расходы составляют 8 байт, дополненные до кратности 4-ем.
Ссылки имеют стандартный размер в 4 байта для 32-битной и 64-битной платформы с размером кучи менее 32 Гб (-Xmx32G) и 8 байт для кучи свыше 32 Гб.
Это значит, что 64-битной JVM требуется размер кучи на 30−50% больше, чем 32-х битной.
Особенно важно отметить, что классы-обертки, массивы, строки, многомерные массивы являются дорогостоящими,
поскольку они добавляют определенные расходы.
Например, если мы сравним примитивный тип int (занимает 4 байта) с его оберткой Integer (занимает 16 байт), то накладные расходы составят 300%.

Примеры разных типов объектов с занимаемой ими памятью ниже для JDK 64:
new User() - пустой объект, имеет минимальную размерность в 16 байт (12 байт "заголовок" + 4 байта для получения размерности, кратной 8 байтам),
new User(1) - объект содержит в себе int, поэтому размерность объекта 16 байт (12 байт - объект + 4 байта на int),
new User("n") - объект содержит в себе String, поэтому размерность объекта 64 байта (16 байт - объект + 48 - String)
new User(int age, "n") - объект содержит в себе int и String поэтому размерность: (12 байт - объект + 4 байта на int + 48 - String)
